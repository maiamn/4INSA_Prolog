	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PROJET %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% ------------------------------------------------------------------------------------- %
%                                Modélisation du problème                               %
% ------------------------------------------------------------------------------------- %


%%% Modélisation des disques %%%

disque(a, [-1, 0, 0, 0, 0, 0]).
disque(b, [-1, -1, 0, 0, 0, 0]).
disque(c, [-1, 0, -1, 0, 0, 0]).
disque(d, [-1, 0, 0, -1, 0, 0]).
disque(e, [-1, -1, -1, 0, 0, 0]).
disque(f, [-1, -1, 0, -1, 0, 0]).
disque(g, [-1, 0, -1, 0, -1, 0]).
disque(h, [-1, -1, -1, -1, 0, 0]).
disque(i, [-1, -1, -1, 0, -1, 0]).
disque(j, [-1, -1, 0, -1, -1, 0]).
disque(k, [-1, -1, -1, -1, -1, 0]).
disque(l, [-1, -1, -1, -1, -1, -1]).

%disque(m, [-1, 0, 0, 0, 0, 0]).
%disque(n, [-1, 0, 0, 0, 0, 0]).

%%% Obtenir la liste des disques %%%
liste_des_disques(L) :-
    findall(X, disque(X, _), L).

%%% Rotation droite d'un disque %%%
rotation_droite(M, [D|A]) :-
    append(A, [D], M). 

%%% Enchaînement de rotations du disque %%%

% Nième rotation du disque %
%n_rotations(M, M, 0).
%n_rotations(M, Res, N) :-
%    N>0, 
%    rotation_droite(M, I), 
%    N1 is N-1, 
%    n_rotations(I, Res, N1).

% Obtenir toutes les rotations entre 0 et 5 %
rotations_possibles(_, M, 0, M).
rotations_possibles(Md, M, I, Res) :-
    rotation_droite(M, L), 
    L \= Md,
    rotations_possibles(Md, L, In, Res),    
    I is In+1.   

% Version finale de la fonction orienter %
orienter(M1, M2, N) :- 
    rotations_possibles(M1, M1, N, M2).

%%% Empilements des disques %%%

empilement_secteur(0,0,0).
empilement_secteur(0,-1,2).
empilement_secteur(1,-1,0).
empilement_secteur(2,-1,1).

% Empilement disques %
empilement([],[],[]).
empilement([A|J], [B|K], [C|L]) :- 
    empilement_secteur(A, B, C), 
    empilement(J, K, L).
    

    
% ------------------------------------------------------------------------------------- %
%                                Résolution du casse-tête                               %
% ------------------------------------------------------------------------------------- %    
    
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Prédicats du problème %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Définition du surface plane %
surface_plane([0,0,0,0,0,0]).

% Etat initial du problème contenant : 
%     * la surface initiale du socle = [0,0,0,0,0,0]
%     * La liste de tous les disques disponibles = liste_des_disques(L)
etat_initial([S, L]) :-
    surface_plane(S),
    %L=[a,m,n].
    liste_des_disques(L).

% Etat final du problème contenant : 
%     * la surface initiale du socle = [0,0,0,0,0,0]
%     * La liste de tous les disques disponibles = []
etat_final([S, []]) :-
    surface_plane(S).

% Fonction auxiliaire pour enlever un élément d'une liste %
enlever(X, [X|R], R).
enlever(X, [Y|R], [Y|Q]) :- enlever(X, R, Q).


% Arc du problème définit comme le passage d'un état E1 à un état E2 grâce à l'action A [D, N]
%     * un disque D choisi est enlevé de la liste L1 de l'état E1
%     * N est le nombre de rotations réalisées pour que l'emboîtement soit possible
%     * RAJOUT : si un disque est posé sur une surface plane il ne peut pas tourner 

arc([S1, L1], [S2, L2], [D, 0]) :- 
    surface_plane(S1),
    % La liste finale de disques disponibles est obtenue en enlevant le disque D de la liste initiale 
    enlever(D, L1, L2),
    % Le disque est défini avec son étiquette et la surface 
    disque(D, M), 
    % La surface est défini par l'empilement du disque sur la surface initiale
    empilement(S1, M, S2).
    

arc([S1, L1], [S2, L2], [D, N]) :- 
    surface_plane(P), 
    S1 \= P, 
    % La liste finale de disques disponibles est obtenue en enlevant le disque D de la liste initiale 
    enlever(D, L1, L2),
    % Le disque est défini avec son étiquette et la surface 
    disque(D, Mi), 
    % On peut effectuer N rotations sur le disque avant de l'empiler 
    orienter(Mi, Mf, N), 
    % La surface est défini par l'empilement du disque sur la surface initiale
    empilement(S1, Mf, S2).
    

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Solution du problème %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Solution(S) définit S comme une liste d'actions permettant de résoudre le casse-tête
% La solution est un chemin qui permet de passer d'un état initial à un état final qui correspond à la solution

%%% Définition d'un chemin %%%
% Un chemin d'arcs qui part et arrive dans le même état est vide 
chemin(E, E, []). 

% Un chemin d'arcs permet de passer d'un état A à un état B via des arcs 
chemin(Depart, Arrivee, Chemin) :-
    Chemin=[A|Arcs],     
    arc(Depart, Inter, A), 
    chemin(Inter, Arrivee, Arcs).

%%% Définition d'une solution %%%
solution(S) :-
    etat_initial(I), 
    etat_final(F), 
    chemin(I, F, S). 

%%% Compte nombre de solutions %%%
nombre_solutions(X) :-
    findall(1, solution(_Y), Sol), 
    length(Sol, X).


